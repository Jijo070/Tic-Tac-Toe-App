{"version":3,"sources":["images/connery.svg","images/square.svg","components/choosePlayer.js","components/Status.js","components/ChooseGameMode.js","components/GameStatus.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Player","e","preventDefault","this","props","player","target","value","_this","react_default","a","createElement","onSubmit","handleForm","type","name","Component","Status","setPlayer","winner","choosePlayer","handleSetPlayer","renderHtml","ChooseGameMode","setGamemode","onChange","bind","GameStatus","setGameMode","gamemode","components_ChooseGameMode","handleSetGameMode","connery","require","square","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","board","Array","fill","order_ndex","checkmatch","winLines","index","length","_winLines$index","slicedToArray","b","c","setState","includes","newBoard","push","checkWinner","_this2","isFrontend","map","box","className","key","onClick","handleClick","src","alt","ndex","pop","prev","_this3","components_GameStatus","components_Status","renderBoxes","reset","disabled","undo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c06478f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/connery.585bd2a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/square.eb91bcae.svg\";","import React, { Component } from 'react';\n\nclass Player extends Component{\n\n\thandleForm(e){\n\t\te.preventDefault();\n\t\tthis.props.player(e.target.player.value);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<form onSubmit={(e)=> this.handleForm(e)}>\n\t\t\t\t<label>\n\t\t\t\t\tPlayer X\n\t\t\t\t\t<input type=\"radio\" name=\"player\" value=\"X\"/>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\tPlayer O\n\t\t\t\t\t<input type=\"radio\" name=\"player\" value=\"O\"/>\n\t\t\t\t</label>\n\n\t\t\t\t<input type=\"submit\" value=\"Start\" />\n\t\t\t</form>\n\t\t)\n\n\t}\n}\n\nexport default Player;","import React, { Component } from 'react';\n\nimport Player from'./choosePlayer';\n\nclass Status extends Component {\n\n\thandleSetPlayer(e){\n\t\tthis.props.setPlayer(e)\n\t}\n\n\trenderHtml(){\n\t\tif (this.props.winner){\n\t\t\treturn (<h4>Game Over! Winner is {this.props.winner}</h4>)\n\t\t} else {\n\t\t\treturn this.props.player ? \n\t      \t<h5>Next player is {this.props.player}</h5> : \n\t      \t<Player player={(e) => this.handleSetPlayer(e)} />\n\t\t}\n\t}\n\n\trender(){\n\n\t\treturn (<span>{this.renderHtml()}</span>)\n\t}\n}\n\nexport default Status;","import React, { Component } from 'react';\n\nclass ChooseGameMode extends Component{\n\n\thandleForm(e){\n\t\tthis.props.setGamemode(e.target.value);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<form onChange={this.handleForm.bind(this)}>\n\t\t\t\t<label>\n\t\t\t\t\tClassic\n\t\t\t\t\t<input type=\"radio\" name=\"gamemode\" value=\"Classic\" />\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\tFrontenddevlandia\n\t\t\t\t\t<input type=\"radio\" name=\"gamemode\" value=\"Frontenddevlandia\" />\n\t\t\t\t</label>\n\n\t\t\t</form>\n\t\t);\n\n\t}\n}\n\nexport default ChooseGameMode;","import React, { Component } from 'react';\n\nimport ChooseGameMode from'./ChooseGameMode';\n\n\nclass GameStatus extends Component {\n\n\thandleSetGameMode(e){\n\t\tthis.props.setGameMode(e)\n\t}\n\n\trender() {\n    return (\n      <div>\n        {this.props.gamemode && (\n          <h3>You are playing the {this.props.gamemode} mode</h3>\n        )}\n        <ChooseGameMode\n          gamemode={this.props.gamemode}\n          setGamemode={e => this.handleSetGameMode(e)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GameStatus;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Status from'./components/Status';\nimport GameStatus from'./components/GameStatus';\n\nconst connery = require(\"./images/connery.svg\");\nconst square = require(\"./images/square.svg\");\n\nclass App extends Component {\n\n\n  constructor(props){\n\n    super(props)\n\n    this.state = {\n\n      board : Array(9).fill(null),\n      player : null,\n      winner : null,\n      gamemode : null,\n      /* array to store the ndex */\n      order_ndex : []\n    }\n\n  }\n\n  //Winning conditions\n  checkWinner(){\n\n    let winLines =\n      [\n        [\"0\", \"1\", \"2\"],\n        [\"3\", \"4\", \"5\"],\n        [\"6\", \"7\", \"8\"],\n        [\"0\", \"3\", \"6\"],\n        [\"1\", \"4\", \"7\"],\n        [\"2\", \"5\", \"8\"], \n        [\"0\", \"4\", \"8\"],\n        [\"2\", \"4\", \"6\"]\n      ]\n\n    this.checkmatch(winLines)\n  }\n\n  //Checks if the current state matches the winning condition\n  checkmatch(winLines){\n    let board = this.state.board;\n    for (let index = 0; index < winLines.length; index++) {\n      const [a,b,c]=winLines[index];\n      if(board[a] && board[a] === board[b] && board[a] === board[c] ){\n        this.setState({\n          winner : this.state.player\n        })\n        this.state.winner = this.state.player;\n      }\n    }\n    if(!this.state.winner && !board.includes(null)){\n      this.setState({\n          winner : \"None\"\n      })\n    }\n  }\n\n  handleClick(index){\n\n    if(this.state.player && !this.state.winner){\n\n      let newBoard = this.state.board\n\n      if(this.state.board[index]===null){\n\n        newBoard[index] = this.state.player\n        /* push the last index into the array */\n        this.state.order_ndex.push(index) \n        this.setState({\n          board: newBoard,\n          player: this.state.player===\"X\" ? \"O\" : \"X\"\n        })\n\n        this.checkWinner()\n\n      }\n    }\n  } \n\n  //Set the current state of Player\n  setPlayer(player){\n    this.setState({player})\n  }\n\n  //Set the current state of the Game mode\n  setGameMode(gamemode){\n    this.setState({gamemode})\n  }\n\n  //Renders the boxes into DOM\n  renderBoxes(){\n    const isFrontend = this.state.gamemode === \"Frontenddevlandia\";\n    return this.state.board.map(\n      (box, index) => (\n      <div \n        className=\"box\" \n        key={index} \n        onClick={() => {\n          this.handleClick(index);\n        }}\n      >\n        {box === \"X\" && isFrontend && <img src={connery} alt=\"X\"/>}\n        {box === \"O\" && isFrontend && <img src={square} alt=\"O\"/>}\n        {!isFrontend && box}\n      </div>\n    ));\n  }\n\n  reset(){\n    this.setState({\n      board : Array(9).fill(null),\n      player :  null,\n      winner : null,\n      setGameMode : null,\n      order_ndex : []\n    })\n\n  } \n\n  undo() {\n    let ndex = this.state.order_ndex.pop() \n    let newBoard = this.state.board\n    let prev = newBoard[ndex]\n    newBoard[ndex] = null\n    this.setState({\n      board: newBoard,\n      player: prev\n    })\n  }\n\n\n  render() {\n\n    return (\n      \n      <div className=\"container\">\n        <h1>Tic Tac Toe</h1>\n\n        <GameStatus \n          gamemode ={this.state.gamemode} \n          setGameMode = {(e)=> this.setGameMode(e)}\n        />\n\n        <Status\n          player={this.state.player} \n          setPlayer={(e) => this.setPlayer(e)}\n          gamemode ={this.state.gamemode} \n          winner = {this.state.winner}\n        />\n\n        <div className=\"board\">\n          \n          {this.renderBoxes()}\n\n        </div>\n        <div className=\"btn\">\n          <button className='reset' onClick = {() => this.reset()}> \n            {\" \"}\n            Reset{\" \"} \n          </button>\n          <div className=\"divider\"/>\n          <button \n            className='reset' \n            disabled ={this.state.winner} \n            onClick = {() => this.undo()}\n          > \n            {\" \"}\n            Undo{\" \"} \n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}